<!DOCTYPE html>
<html lang="en">

<head>
    <title>
        <%= roomName %> - Chat
    </title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-pink-50 flex flex-col h-screen">

    <!-- ÏÉÅÎã® ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò -->
    <nav class="bg-white shadow-md p-4 flex justify-between items-center">
        <h2 class="text-xl font-bold text-pink-600">
            <%= roomName %>
        </h2>
        <div>
            <button id="inviteBtn" class="bg-pink-500 text-white px-3 py-2 rounded-lg mr-3">
                ‚ûï Invite Users
            </button>
            <a href="/rooms" class="text-pink-500">Back</a>
        </div>
    </nav>

    <!-- ‚úÖ Ï¥àÎåÄÌï† Ïú†Ï†Ä ÏÑ†ÌÉùÌïòÎäî Î™®Îã¨ Ï∞Ω -->
    <div id="inviteModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center">
        <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
            <h3 class="text-lg font-bold mb-4">Invite Users to <%= roomName %>
            </h3>
    
            <!-- Ïú†Ï†Ä Î™©Î°ù -->
            <ul>
                <% availableUsers.forEach(user=> { %>
                    <li class="flex justify-between items-center p-2 border-b">
                        <span>
                            <%= user.username %>
                        </span>
                        <button class="inviteUserBtn bg-green-500 text-white px-3 py-1 rounded"
                            data-user-id="<%= user.user_id %>">Invite</button>
                    </li>
                    <% }); %>
            </ul>
    
            <!-- Îã´Í∏∞ Î≤ÑÌäº -->
            <button id="closeInviteModal" class="mt-4 bg-red-500 text-white px-4 py-2 rounded-lg">
                Close
            </button>
        </div>
    </div>
    

    <!-- Ï±ÑÌåÖ Î©îÏãúÏßÄ ÏòÅÏó≠ -->
    <div class="flex-1 overflow-y-auto p-4 space-y-6">
        <% let unreadShown=false; %>
            <% messages.forEach(msg=> { %>
    
                <% if (!unreadShown && msg.message_id> lastReadMessageId) { %>
                    <div class="text-center text-gray-500 text-sm">------- Unread -------</div>
                    <% unreadShown=true; %>
                        <% } %>
    
                            <!-- ‚úÖ Î©îÏãúÏßÄ Î∞ïÏä§ -->
                            <div class="relative flex flex-col <%= msg.isOwn ? 'items-end' : 'items-start' %>">
                                <% if (!msg.isOwn) { %>
                                    <!-- ‚úÖ Î≥∏Ïù∏Ïù¥ Î≥¥ÎÇ∏ Î©îÏãúÏßÄÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞, Ïù¥Î¶ÑÏùÑ ÎßêÌíçÏÑ† ÏôºÏ™Ω ÏúÑÏóê ÌëúÏãú -->
                                    <span class="text-xs text-gray-500 font-semibold mb-1">
                                        <%= msg.username %>
                                    </span>
                                    <% } %>
    
                                        <div
                                            class="relative <%= msg.isOwn ? 'bg-pink-500 text-white' : 'bg-gray-200' %> px-4 py-2 rounded-lg max-w-xs">
                                            <p>
                                                <%= msg.text %>
                                            </p>
                                            <p class="text-xs text-gray-400 text-right mt-1">
                                                <%= msg.time ? msg.time : "Invalid Date" %>
                                            </p>
    
                                            <!-- ‚úÖ Î∞òÏùë Î∞è Ïù¥Î™®ÏßÄ Ï∂îÍ∞Ä Î≤ÑÌäº -->
                                            <div class="flex items-center mt-1 space-x-2 absolute -bottom-7 right-1">
                                                <% if (msg.reactions && msg.reactions.length> 0) { %>
                                                    <span
                                                        class="bg-white px-2 py-1 rounded-full shadow flex items-center space-x-1 text-lg text-gray-500">
                                                        <% msg.reactions.forEach(reaction=> { %>
                                                            <span class="flex items-center space-x-1">
                                                                <%= reaction.emoji %>
                                                                    <% if (reaction.count> 1) { %>
                                                                        <span class="text-sm font-semibold">
                                                                            <%= reaction.count %>
                                                                        </span>
                                                                        <% } %>
                                                            </span>
                                                            <% }); %>
                                                    </span>
                                                    <% } %>
                                                        <button
                                                            class="emoji-btn text-gray-500 text-sm p-1 rounded-full bg-white shadow-md"
                                                            data-message-id="<%= msg.message_id %>">‚ûï</button>
                                            </div>
                                        </div>
                            </div>
                            <% }); %>
    </div>

    

    

    <!-- Î©îÏãúÏßÄ ÏûÖÎ†• ÏòÅÏó≠ -->
    <form action="/rooms/<%= roomId %>/send" method="POST" class="p-4 bg-white flex items-center">
        <input type="text" name="message" placeholder="Type a message" class="flex-1 p-2 border rounded-lg">
        <button type="submit" class="ml-2 bg-pink-500 text-white p-2 rounded-lg">Send</button>
    </form>

    <!-- ‚úÖ Ïù¥Î™®ÏßÄ ÏÑ†ÌÉù UI (Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Ïà®Í≤®Ï†∏ ÏûàÏùå) -->
    <div id="emoji-picker" class="hidden fixed bg-white p-2 shadow-md rounded-lg">
        <% availableEmojis.forEach(emoji=> { %>
            <button class="emoji-option text-2xl p-1" data-emoji="<%= emoji.emoji_code %>">
                <%= emoji.emoji_code %>
            </button>
            <% }); %>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const inviteBtn = document.getElementById("inviteBtn");
            const inviteModal = document.getElementById("inviteModal");
            const closeInviteModal = document.getElementById("closeInviteModal");
            const inviteUserBtns = document.querySelectorAll(".inviteUserBtn");
            const emojiButtons = document.querySelectorAll(".emoji-btn");
            const emojiPicker = document.getElementById("emoji-picker");

            if (inviteBtn && inviteModal && closeInviteModal) {
                // ‚úÖ Ï¥àÎåÄ Î™®Îã¨ Ïó¥Í∏∞
                inviteBtn.addEventListener("click", () => {
                    inviteModal.classList.remove("hidden");
                });

                // ‚úÖ Ï¥àÎåÄ Î™®Îã¨ Îã´Í∏∞
                closeInviteModal.addEventListener("click", () => {
                    inviteModal.classList.add("hidden");
                });

                // ‚úÖ Ïú†Ï†Ä Ï¥àÎåÄ ÏöîÏ≤≠
                inviteUserBtns.forEach(btn => {
                    btn.addEventListener("click", (e) => {
                        const userId = e.target.dataset.userId;

                        fetch(`/rooms/<%= roomId %>/invite`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ userId })
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    alert("User invited successfully!");
                                    inviteModal.classList.add("hidden");
                                    location.reload();  // ‚úÖ Ï¥àÎåÄ ÌõÑ ÏÉàÎ°úÍ≥†Ïπ®
                                } else {
                                    alert("Error inviting user: " + data.error);
                                }
                            })
                            .catch(err => console.error("‚ùå Invite error:", err));
                    });
                });
            }

            emojiButtons.forEach(btn => {
                btn.addEventListener("click", (e) => {
                    e.preventDefault();
                    const messageId = e.target.dataset.messageId;

                    // ‚úÖ Ïù¥Î™®ÏßÄ ÏÑ†ÌÉùÏ∞Ω ÏúÑÏπò ÏÑ§Ï†ï
                    const rect = e.target.getBoundingClientRect();
                    emojiPicker.style.left = `${rect.left + window.scrollX}px`;
                    emojiPicker.style.top = `${rect.top + window.scrollY + 30}px`;
                    emojiPicker.classList.remove("hidden");

                    // ‚úÖ Í∏∞Ï°¥ Î¶¨Ïä§ÎÑà Ï†úÍ±∞ ÌõÑ ÏÉàÎ°ú Ï∂îÍ∞Ä (Ï§ëÎ≥µ Î∞©ÏßÄ)
                    document.querySelectorAll(".emoji-option").forEach(emojiBtn => {
                        emojiBtn.removeEventListener("click", handleEmojiClick);
                        emojiBtn.addEventListener("click", (event) => handleEmojiClick(event, messageId));
                    });
                });
            });

            function handleEmojiClick(e, messageId) {
                e.preventDefault();
                const selectedEmoji = e.target.dataset.emoji;

                if (!selectedEmoji) {
                    console.error("‚ùå Error: No emoji selected");
                    return;
                }

                console.log(`üîπ Sending reaction: ${selectedEmoji} to message ID: ${messageId}`);

                fetch(`/rooms/<%= roomId %>/messages/${messageId}/react`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },  // ‚úÖ JSON Îç∞Ïù¥ÌÑ∞Î•º Ïò¨Î∞îÎ•¥Í≤å Ï†ÑÏÜ°
                    body: JSON.stringify({ emoji: selectedEmoji })
                })
                    .then(response => {
                        if (!response.ok) throw new Error("Reaction failed");
                        console.log("‚úÖ Reaction added successfully");
                        location.reload();  // ‚úÖ Î∞òÏùë Ï∂îÍ∞Ä ÌõÑ ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®
                    })
                    .catch(err => console.error("‚ùå Error reacting to message:", err));
            }

            // ‚úÖ ÌÅ¥Î¶≠ Ïô∏Î∂Ä Í∞êÏßÄ Ïãú Ïù¥Î™®ÏßÄ ÏÑ†ÌÉùÏ∞Ω Îã´Í∏∞
            document.addEventListener("click", (e) => {
                if (!e.target.closest(".emoji-btn") && !e.target.closest("#emoji-picker")) {
                    emojiPicker.classList.add("hidden");
                }
            });
        });
    </script>


</body>

</html>